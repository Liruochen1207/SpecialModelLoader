import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
    id 'net.darkhax.curseforgegradle' version '1.1.25'
    id "com.modrinth.minotaur" version '2.8.7'
    id 'org.jetbrains.changelog' version "2.0.0"
}

// Version Check
if (System.getenv("GITHUB_REF") != null && System.getenv("GITHUB_REF").startsWith("refs/tags/v")) {
    if (System.getenv("GITHUB_REF").substring("refs/tags/v".length()) != project.mod_version)
        throw new IllegalStateException("The version and tag specification are different")
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

fabricApi {
    configureDataGeneration() {
        client = true
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "special-model-loader" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.test
        }

        testmodDatagen {
            client()

            ideConfigGenerated project.rootProject == project

            name = "Testmod Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/test/generated")}"

            runDir "build/datagen"
            source sourceSets.test
        }
    }
}

sourceSets {
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += client.compileClasspath
        runtimeClasspath += client.runtimeClasspath

        resources {
            srcDirs += [
                    'src/test/generated'
            ]
        }
    }
}

changelog {
    repositoryUrl = rootProject.repository_url
    introduction = """
    Changelog to track updates for this mod.  
    Add your changes to Unreleased if you want to commit.  
    Please write according to [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
    """
    combinePreReleases = false
}

repositories {
    maven { url "https://maven.parchmentmc.org" }
}

configurations {
    modImplementation.extendsFrom includeIn
    include.extendsFrom includeIn
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.21.4:2025.01.05@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    includeIn "de.javagl:obj:0.4.0"

    testImplementation sourceSets.client.output
}

remapJar {
    archiveClassifier.set(null)
    setArchivesBaseName("${rootProject.archives_base_name}-mc${rootProject.minecraft_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
            pom {
                name = 'SpecialModelLoader'
                description = 'Support for loading special models.'
                developers {
                    developer {
                        id = 'MORIMORI0317'
                        name = 'MORIMORI0317'
                    }
                    developer {
                        id = 'FelNull'
                        name = 'TeamFelNull'
                        email = 'teamfelnull@felnull.dev'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url "https://maven.felnull.dev/"
            credentials {
                username = "felnull"
                password = "${project.maven_put_pass}" != '' ? "${project.maven_put_pass}" : System.getenv('mavenpassword')
            }
        }
    }
}

def mainJar = file("${project.layout.buildDirectory.get().asFile}/libs/${project.archives_base_name}-mc${project.minecraft_version}-${project.mod_version}.jar")
def sourcesJar = file("${project.layout.buildDirectory.get().asFile}/libs/${project.archives_base_name}-mc${project.minecraft_version}-${project.mod_version}-sources.jar")
def changeLogFile = file('./LATEST_CHANGELOG.md')
def uploadMainName = "${project.mod_display_name}-${project.minecraft_version}-${project.mod_version}"
def uploadSourcesName = "${project.mod_display_name}-${project.minecraft_version}-${project.mod_version}-sources"

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    if (System.getenv('curesforgeapikey') != null && "${project.curesforge_id}" != '') {
        apiToken = System.getenv('curesforgeapikey')

        def mainFile = upload(findProperty('curesforge_id'), mainJar)
        mainFile.changelogType = 'markdown'
        mainFile.changelog = changeLogFile.text
        mainFile.releaseType = "${project.release_type}"
        mainFile.displayName = uploadMainName

        project.support_versions.split(",").each {
            String version -> mainFile.addGameVersion(version)
        }

        mainFile.addJavaVersion('Java 21')

        mainFile.addModLoader('Fabric')
        mainFile.addModLoader('Quilt')

        mainFile.addGameVersion('Client')

        mainFile.addRequirement("fabric-api")

        def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
        sourcesFile.displayName = uploadSourcesName
    }
}

if (System.getenv('modrinthapikey') != null && "${modrinth_id}" != '') {
    modrinth {
        token = System.getenv('modrinthapikey')
        projectId = "${project.modrinth_id}"
        versionName = uploadMainName
        versionNumber = "${project.minecraft_version}-${project.mod_version}"
        versionType = "${project.release_type}"
        uploadFile = mainJar
        gameVersions = List.of(project.support_versions.split(","))
        loaders = ["fabric", "quilt"]
        dependencies {
            required.project("P7dR8mSH") //Fabric API
        }
        changelog = changeLogFile.text
    }
}